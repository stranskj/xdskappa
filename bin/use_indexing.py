# -*- coding: utf-8 -*-
"""
Created on Mon Apr  3 22:00:19 2017

@author: Jan Stransky
"""

import sys, xdataset, parmxds, math, numpy

def vector_to_000(vecin,omega,chi,phi):
    """
    Rotates vector to origin of goniometer
    @param vecin: vector to rotate to origin
    @type vecin: list with 3 values
    
    @param omega, chi, phi: position of goniometr
    @type omega, chi, phi: float in radians
    """
    
    #vecout = [0]*3
    
    mOmega =    [[math.cos(omega),0 ,-1*math.sin(omega)],\
                [0, 1, 0],\
                [math.sin(omega), 0, math.cos(omega)]]
                
    mChi =  [[math.cos(chi), -1*math.sin(chi), 0],\
            [math.sin(chi), math.cos(chi), 0],\
            [0, 0, 1]] 
    
    mPhi =    [[math.cos(phi),0 ,-1*math.sin(phi)],\
                [0, 1, 0],\
                [math.sin(phi), 0, math.cos(phi)]]    
    
    vecout = numpy.dot(numpy.dot(numpy.dot(mOmega,mChi),mPhi),vecin)
    
    return vecout
    
def vector_from_000(vecin,omega,chi,phi):
    """
    Rotates vector from origin to goniometer position
    @param vecin: vector to rotate to origin
    @type vecin: list with 3 values
    
    @param omega, chi, phi: position of goniometr
    @type omega, chi, phi: float in radians
    """
    
    #vecout = [0]*3
    
    mOmega =    [[math.cos(omega),0 ,math.sin(omega)],\
                [0, 1, 0],\
                [-1*math.sin(omega), 0, math.cos(omega)]]
                
    mChi =  [[math.cos(chi), math.sin(chi), 0],\
            [-1*math.sin(chi), math.cos(chi), 0],\
            [0, 0, 1]] 
    
    mPhi =    [[math.cos(phi),0 ,math.sin(phi)],\
                [0, 1, 0],\
                [-1*math.sin(phi), 0, math.cos(phi)]]    
    
    vecout = numpy.dot(numpy.dot(numpy.dot(mPhi,mChi),mOmega),vecin)
    
    return vecout    

def process_arguments(argv):
    parser = argparse.ArgumentParser(prog= 'xdskappa.use_indexing', description='Reuse indexing solution on different dataset.', epilog='Dependencies: None')
    
    parser.add_argument('-i','--in-dataset', dest='InDataset', action='append', required=True, metavar='FILE', help='File with indexing solution to re-use on other datasets. Generally XPARM.XDS or GXPARM.XDS generated by IDXREF or CORRECT steps.')
    
    parser.add_argument('-D','--dataset-file', dest='DatasetListFile', nargs='?', required=True, default='datasets.list', const='datasets.list', metavar='FILE', help='List of datasets to re-use indexing. Entries are in format: output_subdirectory<tab>path/template_????.cbf. When no file is given, "datasets.list" is expected.')
        
    # help on empty input
    if len(argv) == 1:
        parser.print_help()     # help on empty input
        sys.exit(1)

    outArgs = parser.parse_args(argv)
    
    return outArgs

def Main(args):
    return

if __name__ == "__main__":
    
    try:
            import argparse
            
    except Exception:
            print "Your python is probably to old. At least version 2.7 is required."
            print "Your version is: " +  sys.version
            sys.exit(1)

    args = process_arguments(sys.argv)
    Main(args)
    sys.exit(0)
